local mappings = {
    { "<leader>w",  "<cmd>w<cr>",                                                                          mode = "n", desc = "Save" },
    { "<leader>q",  "<cmd>q<cr>",                                                                          mode = "n", desc = "Quit" },
    { "<leader>s",  group = "Search & Replace" },
    { "<leader>sc", "<cmd>:let @/=''<CR>",                                                                 mode = "n", desc = "Clear" },
    { "<leader>ss", [[:%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>]],                                mode = "n", desc = "File Replace Word" },
    { "<leader>sd", [[:.,.+25s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>]],                           mode = "n", desc = "Next 25L - Replace Word" },
    { "<leader>sf", [[:.,.+0s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>]],                            mode = "n", desc = "Same Line - Replace Word" },
    { "<leader>p",  group = "Project" },
    { "<leader>pv", "<cmd>Ex<CR>",                                                                         mode = "n", desc = "NetRW Explorer", },
    { "<leader>f",  group = "Find" },
    { "<leader>ft", "<cmd>lua require('telescope.builtin').live_grep()<CR>",                               mode = "n", desc = "Text" },
    { "<leader>ff", "<cmd>lua require('telescope.builtin').find_files()<CR>",                              mode = "n", desc = "Files" },
    { "<leader>fr", "<cmd>lua require('telescope.builtin').resume()<CR>",                                  mode = "n", desc = "Resume last search" },
    { "<leader>fh", "<cmd>lua require('telescope.builtin').help_tags()<CR>",                               mode = "n", desc = "Help tags" },
    { "<leader>fb", "<cmd>lua require('telescope').extensions.file_browser.file_browser()<CR>",            mode = "n", desc = "Browse Files" },
    { "<leader>fB", "<cmd>lua require('telescope').extensions.file_browser.file_browser(%:p:h, true)<CR>", mode = "n", desc = "Browse Relative" },
    { "<leader>b",  group = "Buffers" },
    { "<leader>bd", "<cmd>bdelete<cr>",                                                                    mode = "n", desc = "Close Current" },
    { "<leader>bm", "<cmd>BufferLineCloseRight<cr><cmd>BufferLineCloseLeft<cr>",                           mode = "n", desc = "Close all other" },
    { "<leader>bl", "<cmd>BufferLineCloseRight<cr>",                                                       mode = "n", desc = "Close right" },
    { "<leader>bh", "<cmd>BufferLineCloseLeft<cr>",                                                        mode = "n", desc = "Close left" },
    { "<leader>h",  group = "Harpoon" },
    { "<leader>he", "<cmd>lua require('harpoon').ui:toggle_quick_menu(require('harpoon'):list())<cr>",     mode = "n", desc = "View Marked Files" },
    { "<leader>hh", "<cmd>lua require('harpoon'):list():add()<cr>",                                        mode = "n", desc = "Mark file" },
    { "<leader>ha", "<cmd>lua require('harpoon'):list():select(4)<cr>",                                    mode = "n", desc = "Nav file 4" },
    { "<leader>hs", "<cmd>lua require('harpoon'):list():select(3)<cr>",                                    mode = "n", desc = "Nav file 3" },
    { "<leader>hd", "<cmd>lua require('harpoon'):list():select(2)<cr>",                                    mode = "n", desc = "Nav file 2" },
    { "<leader>hf", "<cmd>lua require('harpoon'):list():select(1)<cr>",                                    mode = "n", desc = "Nav file 1" },
    { "<leader>l",  group = "LSP" },
    { "<leader>ll", "<cmd>lua vim.lsp.buf.declaration()<cr>",                                              mode = "n", desc = "Declaration" },
    { "<leader>ld", "<cmd>lua vim.lsp.buf.definition()<cr>",                                               mode = "n", desc = "Definition" },
    { "<leader>li", "<cmd>lua vim.lsp.buf.implementation()<cr>",                                           mode = "n", desc = "Implementation" },
    { "<leader>lR", "<cmd>lua vim.lsp.buf.references()<cr>",                                               mode = "n", desc = "References" },
    { "<leader>lK", "<cmd>lua vim.lsp.buf.hover()<cr>",                                                    mode = "n", desc = "Hover" },
    { "<leader>lk", "<cmd>lua vim.lsp.buf.hover()<cr>",                                                    mode = "n", desc = "Hover" },
    { "<leader>ln", ":IncRename ",                                                                         mode = "n", desc = "Rename" },
    { "<leader>la", "<cmd>lua require('actions-preview').code_actions()<cr>",                              mode = "n", desc = "Code actions" },
    { "<leader>lf", "<cmd>lua vim.lsp.buf.format({ async = true })<cr>",                                   mode = "n", desc = "Format" },
    { "<leader>ll", "<cmd>lua vim.diagnostic.open_float()<cr>",                                            mode = "n", desc = "Open float" },
    { "<leader>lh", ":LspRestart<cr>",                                                                     mode = "n", desc = "Restart LSP Server" },
    { "<leader>ly", ":LspStart<cr>",                                                                       mode = "n", desc = "Start LSP Server" },
    --{ "<leader>lT", "<cmd>lua vim.lsp.buf.type_definition()<cr>",                                          mode = "n", desc = "Type definition" },
    --{ "<leader>lk", "<cmd>lua vim.lsp.buf.signature_help()<cr>",                                           mode = "n", desc = "Signature help" },
    --[[ { "<leader>S",  group = "Spell Checker" },
    { "<leader>Sj", "<cmd>]s<cr>",                                                                         mode = "n", desc = "Next word" },
    { "<leader>Sk", "<cmd>[s<cr>",                                                                         mode = "n", desc = "Previous word" },
    { "<leader>Ss", "<cmd>z=<cr>",                                                                         mode = "n", desc = "Show suggestions" }, ]]
    --[[ { "<leader>r",  group = "Rust" },
    { "<leader>rr", "<cmd>RustRun<cr>",                                                                    mode = "n", desc = "Run" },
    { "<leader>ra", "<cmd>RustRunnables<cr>",                                                              mode = "n", desc = "Runnables" }, ]]
    { "<leader>e",  group = "Code Macros" },
    { "<leader>ee", "oif err != nil {<CR>}<Esc>Oreturn err<Esc>",                                          mode = "n", desc = "Insert if err nil statement" },
    { "<leader>c",  group = "Cloak" },
    { "<leader>cc", "<cmd>:CloakToggle<cr>",                                                               mode = "n", desc = "Toggle" },
    { "<leader>u",  group = "Trouble" },
    { "<leader>ur", "<cmd>TroubleToggle lsp_references<cr>",                                               mode = "n", desc = "References" },
    { "<leader>uf", "<cmd>TroubleToggle lsp_definitions<cr>",                                              mode = "n", desc = "Definitions" },
    { "<leader>ud", "<cmd>TroubleToggle document_diagnostics<cr>",                                         mode = "n", desc = "Diagnostics" },
    { "<leader>uq", "<cmd>TroubleToggle quickfix<cr>",                                                     mode = "n", desc = "QuickFix" },
    { "<leader>ul", "<cmd>TroubleToggle loclist<cr>",                                                      mode = "n", desc = "LocationList" },
    { "<leader>uw", "<cmd>TroubleToggle workspace_diagnostics<cr>",                                        mode = "n", desc = "Workspace Diagnostics" },
}

local opts = {
    preset = "helix",
    delay = 0,
    timeoutlen = 0,
}

local wk = require("which-key")
wk.setup(opts)
wk.add(mappings)
